"""Domain classes and functions related to the concept of performer
"""


from woodstock.util import utility


class Performer:
    """The class describing the concept of performer.
    It is assumed that a performer is sufficiently described by their
    name and whether they are a solo performer or a band.

    Illustrates some of the important concepts of Python classes:
    - self
    - __init__()
    - __str__()
    - __eq__(self, other) is the equivalent of Java equals() and should be overridden in classes
    - data fields (instance variables)
    - methods - calling them by self.<method>(...) from the same class where they are defined
    """

    def __init__(self, name, is_band=True):
        self.name = name
        self.is_band = is_band
        # self.__n = 'lll'                                    # 'private' field

    # Properties: 'private' fields; run setters and getters in the debugger.
    # Make name a property (after setting up __init__(), __str__(), __eq__(), methods,...).

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        self.__name = name if name and isinstance(name, str) else 'unknown'

    # Add an immutable property (no setter for it)

    @property
    def complete_info(self):                                # immutable property: no setter for it
        return self

    def __str__(self):
        return (self.name + ' (band)' if self.is_band else self.name + ' (solo performer)') \
            if self.name and isinstance(self.name, str) and not self.name == 'unknown' else 'unknown'

    def __eq__(self, other):
        return self.name == other.name if isinstance(other, Performer) else False

    # def play(self, song_title):
    #     print(self.name + ':', f'playing {song_title}...', end=' ')
    #     pass
    #
    # def play_with_greeting(self, song_title, greeting):
    #     self.play(song_title)                               # self.<method>(...) as a mandatory syntax
    #     print(greeting)

    def play(self, song_title, *args, **kwargs):
        """Assumes that song_title, *args (expressions of gratitude) and kwargs.values() (messages) are strings.
        Prints song_title, expressions of gratitude and messages. A call example:
            <performer>.play(song_title, *['Thank you!', 'You're wonderful!], love='We love you!')
        """

        print(self.name, f'playing {song_title}...', end=' ')
        # print(*args if args else '')
        # print(*args if args else '' + ', '.join([v for k, v in kwargs]) if kwargs else '')
        print(*args if args else '', ', '.join([v for k, v in kwargs.items()]) if kwargs else '')

    def play_song(self, song_title, *args, **kwargs):
        """Demonstrates calling another method feom the same class (self.<method>(...) as a mandatory syntax).
        """

        self.play(song_title, *args, **kwargs)

    # Alternative constructor
    @classmethod
    def from_str(cls, performer_string):
        """Inverted __str__() method.
        Assumes that performer_string is in the format generated by __str__().
        """

        name = False
        is_band = True
        split = performer_string.split(' (')
        if split[0] == 'unknown':
            pass
        elif split[-1] == 'solo performer)':
            name = split[0].rstrip()
            is_band = False
        else:
            name = split[0].rstrip()
        return cls(name, is_band)


if __name__ == "__main__":

    # pass

    # Data

    # Some of the Woodstock performers, Aug 15-16, 1969
    melanie = Performer('Melanie', is_band=False)
    arloGuthrie = Performer('Arlo Guthrie', is_band=False)
    # Some of the Woodstock performers, Aug 16-17, 1969
    gratefulDead = Performer('Grateful Dead', is_band=True)
    jeffersonAirplane = Performer('Jefferson Airplane', is_band=True)
    theWho = Performer('The Who', is_band=True)
    ccr = Performer('Creedence Clearwater Revival', is_band=True)
    # Some of the Woodstock performers, Aug 17-18, 1969
    csny = Performer('Crosby, Stills, Nash and Young', is_band=True)
    jimiHendrix = Performer('Jimi Hendrix', is_band=False)
    theBand = Performer('The Band', is_band=True)

    # Print objects
    print(melanie)
    print(csny)

    # Compare objects
    print(melanie == Performer('Melanie', True))
    print(melanie == Performer('Melanie', False))

    # Access data fields (instance variables)
    print(melanie.is_band)
    melanie.is_band = True
    # melanie.complete_info = 'Melanie, known for "Lay Down"' # no! it's an immutable property (no setter for it)
    # print(melanie.complete_info)                            # (but just getting it is OK)
    print(melanie.name)
    # print(melanie._Performer__n)                            # accessing private field
    # melanie._Performer__n = 'kkk'

    print(melanie)

    # Add new data fields (instance variables)
    #   1. <object>.<new_attr> = <value>
    #   2. <object>.__setattr__('<new_attr>', <value>)      # counterpart: <object>.__getattribute__('<attr>')
    #   3. setattr(<object>, '<new_attr>', <value>))        # counterpart: getattr(<object>, '<attr>')
    # melanie.nationality = 'US'
    # print(melanie.nationality)
    # melanie.__setattr__('nationality', 'US')
    # print(melanie.__getattribute__('nationality'))
    # print(melanie.__getattribute__('name'))
    setattr(melanie, 'nationality', 'US')
    print(getattr(melanie, 'nationality'))

    # Calling methods
    # melanie.play_with_greeting('Lay Down', 'Thank you!')
    # melanie.play('Lay Down', 'Thank you!')
    # melanie.play('Lay Down', 'Thank you!', 'You\'re beautiful!')
    melanie.play('Lay Down', 'Thank you!', 'You\'re beautiful!', love='I love you!')

    # Demonstrate object data fields and methods in Python Console for some built-in classes (boolean, int, object,...)
    # - True + 1
    # - True.__int__()
    # - (1).__class__.__name__
    # - (1).__class__
    # - o.__dir__()
    # - o.__dir__

    # Demonstrate object data fields and methods in Python Console for Performer objects
    print(melanie.__class__)
    print(melanie.__class__.__name__)
    print(melanie.__dict__)
    print(dir())
    print(Performer.__dir__(melanie))

    # Demonstrate @classmethod (from_str())
    melanie_str = melanie.__str__()
    print(Performer.from_str(melanie_str))
    print(melanie.from_str(melanie_str))
    print(melanie.from_str('unknown'))

